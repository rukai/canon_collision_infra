{{#*inline "page"}}
<h1 class="doc-heading">Modding Tutorial</h1>

<p>Following this tutorial is a great way to get started with editing fighters in Canon Collision.
For a full reference of every operation check out the <a href="manual">Manual</a>.
All controller inputs mentioned in this tutorial use the <a href="https://upload.wikimedia.org/wikipedia/commons/thumb/3/32/GCController_Layout.svg/450px-GCController_Layout.svg.png">Gamecube controller layout</a>.
</p>

<h2 class="doc-heading">Setup</h2>
<p>First start a local game with 2 players both playing the same character.
Ensure your controller is player 1 (leftmost on the character select screen)
Player 2 can be a CPU or a different controller.
</p>

<h2 class="doc-heading">Basics</h2>

<p>When editing fighters or the stage we need to set, this state will be referred to as edit mode from here on:
<ul>
    <li>The camera to orthographic mode - press esc</li>
    <li>The game to pause - press spacebar or start on the controller</li>
</ul>
Then press <code>1</code> to select player 1.
Now press F9 to toggle on collision box display.
Unpause and play around with the character, you will see that hitboxes are red and hurtboxes are white with a colored outline.
Return to edit mode and press F9 again to change between other render modes until we reach the standard render mode again.
</p>

<p>Lets turn on the ECB display for all players.</p>

<ol>
    <li>Press 1</li>
    <li>Press F9</li>
    <li>Press 2</li>
    <li>Press F9</li>
</ol>

<h2 class="doc-heading">Player states</h2>

<p>Return to edit mode, select your player (press 1) before continuing.
Press F3, to enable player state debug information.
You can now see debug info at the top of the screen.</p>

<p>Hold X on your controller and press spacebar on your keyboard.
Your action will go from Idle -> JumpSquat.
Press spacebar again and again until your action goes from JumpSquat -> JumpF.
Press spacebar again and again until your fighter lands.</p>

<h2 class="doc-heading">Playing with colboxes</h2>

<p>Ensure your fighter is in its Idle state again.
Position your cursor, near your fighter, and press <code>F</code>.
Player 1 should now have a new colbox (Collision Box).</p>

<p>Now select any colbox with left click.
The colbox should be fully green.
Use the square bracket keys, [ and ], to resize the selected colbox.</p>

<p>Hold shift and left-click to select multiple hitboxes.
Press the A key.
Now you can move the selected colboxes by moving your mouse.
Left click to confirm the new position.</p>

<p>Click and drag, with right click to select multiple colboxes.
Select all your colboxes and press D to delete them all.</p>

<p>Play around with colboxes to your hearts content, then test out your creation in game.</p>

<h2 class="doc-heading">Adding/removing action frames</h2>

<p>Return your player to the idle state, return to edit mode, and select your player.
Notice how the player state debug information says <code>frame: X/Y</code>.
This means the Idle action has Y frames and the player is currently on frame X.
<a href="https://en.wikipedia.org/wiki/Zero-based_numbering#Usage_in_programming_languages">0 refers to the first frame</a> as that is easier to work with when programming.

<p>Lets add another frame to this action by pressing M.
If we were on <code>frame: 9/20</code>, a new frame is inserted at index 10, and we will now be on the new frame at <code>frame: 10/20</code>.
</p>

<p>TODO: This desyncs the hurtboxes from the animation of the model, lets use this opportunity to explain how to run the hurtbox generator.</p>

<h2 class="doc-heading">Hurtbox generator</h2>
<p>TODO</p>

<h2 class="doc-heading">Camera</h2>

<p>As you are editing your fighter you will want to manually control the camera to better see your fighter.
Middle click to pan the camera.
Scroll to zoom the camera.
Press Backspace to return control of the camera to the game.
</p>

<h2 class="doc-heading">Command Line</h2>

<p>Press '~' to open the command line in Canon Collision.</p>
<p>A command looks like this:</p>
<p><code>package:help</code></p>
<p>We use the help command to learn what an object can do and what other objects it contains.
By looking under the Accessors section, we can see that the package contains entities, stages, meta, and rules.
Lets further investigate entities.</p>
<p><code>package.entities:help</code></p>

<h2 class="doc-heading">Save/Reload</h2>
<p>Run the command: <code>package:save</code>
Wait for the 'Save completed successfully' message to appear.
Close Canon Collision and reopen it to verify that your changes are still there.</p>

<p>Make a change to your fighter and then run: <code>package:reload</code>
Verify that your fighter is the same as when you last ran <code>package:save</code></p>

<h2 class="doc-heading">Package</h2>

<h2 class="doc-heading">Keys &amp; Context</h2>
<p>Everything that can be interacted with in the game is an entity, that include fighters, projectiles and items. <code>package.entities</code> stores the frame data for every entity in the game.</p>

<p><code>package.entities</code> is a keyed context vector of entities, that means it contains multiple entities. (accessible by both a key, an index and context)</p>
<p>We can access a specific entity via its filename, assuming you have a fighter with filename foo.cbor then we can run:</p>
<p><code>package.entities["foo.bor"]:help</code></p>
<p>But thats generally not useful. (We don't want to have to check the filename of the entity we are editing.)
Instead we make use of the context system.
By using <code>?</code> as our key, we tell Canon Collision to automatically choose the fighter to access via in game context.
In this case it uses the entity used by the player we have selected with keys 1234.</p>
<p><code>package.entities[?]:help</code></p>
<p>If this doesn't display the entity help, ensure you are in edit mode and you have selected a player (1)</p>

<h2 class="doc-heading">Fighter data</h2>

<p>Lets play with some of the entity properties we can see from running the help command.</p>
<p>This will get the number of aerial jumps the entity can do:</p>
<p><code>package.entities[?].air_jumps:get</code></p>
<p>Try setting the number of aerial jumps the entity has:</p>
<p><code>package.entities[?].air_jumps:set 99</code></p>
<p>Try setting other properties listed by the help command and see what happens.</p>

<h2 class="doc-heading">Descending the tree</h2>

<p>Individual colboxes can be accessed and manipulated, however they are stored in an object in an object in an object in an object.
To find them we are going to do some exploration with the help command.
We see that the entity contains an <code>actions</code> property which is a context vec.
(once again this object contains multiple actions, however they are only accessible by index and context.)</p>
<p><code>package.entities[?].actions:help</code></p>
<p>We can use an index to access a numbered element of the vector</p>
<p><code>package.entities[?].actions[0]:help</code></p>

<p>However once again this is rarely useful so we stick to using context.
This way we access the current action the selected player is in.</p>
<p><code>package.entities[?].actions[?]:help</code></p>
<p>We can see two properties: iasa and frames.</p>
<p><code>package.entities[?].actions[?].frames[?]:help</code></p>
<p>We can see the colboxes property among numerous other properties.</p>
<p><code>package.entities[?].actions[?].frames[?].colboxes:help</code></p>
<p>Nice, now we know how to access colboxes, and (hopefully) better understand how frame data is structured.</p>

<h2 class="doc-heading">Colbox resize</h2>

<p>Now select a hitbox by clicking on it in canon collision and run this command:</p>
<p><code>package.entities[?].actions[?].frames[?].colboxes[?].radius:set 10</code></p>

<h2 class="doc-heading">Variants &amp; Hitboxes</h2>

<p>Select a colbox and run this command:</p>
<p><code>package.entities[?].actions[?].frames[?].colboxes[?].role:variant Hit</code></p>
<p>This changes the role of the colbox to be a hitbox.
Test it out in game.</p>
<p>Now that we have set the role to hit, we have access to more properties on the role.</p>
<p><code>package.entities[?].actions[?].frames[?].colboxes[?].role[0].bkb:set 9001</code></p>
<p>We set the base knockback for the hitbox to 9001
Test this out in game!</p>

{{/inline}}

{{~> base title="Canon Collision | Editor Tutorial" page_tutorial=true ~}}
