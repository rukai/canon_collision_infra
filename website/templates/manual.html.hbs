<p>{{#*inline "page"}}</p>

<h1 class="doc-heading">PF Sandbox Manual</h1>

<h2 class="doc-heading">Controller Setup</h2>

<h3 class="doc-heading">Controller Support</h3>

<ul>
    <li>Windows: Xbox controllers + native GC adapter</li>
    <li>Linux: All controllers + native GC adapter</li>
</ul>

You cannot use a keyboard as a controller, you must setup a controller as below.

<h3 class="doc-heading">WiiU adapter setup</h3>

<p>Follow the steps for your OS, found under Installation at this <a href="https://wiki.dolphin-emu.org/index.php?title=How_to_use_the_Official_GameCube_Controller_Adapter_for_Wii_U_in_Dolphin">Dolphin Wiki page</a>.
There is no need to perform the steps listed under Dolphin Setup.</p>

<p>Make sure your adapter is <span class="warning">set to Wii U mode</span>.</p>

<p>There is no need to perform any mapping.</p>

<h3 class="doc-heading">Other Controller Setup</h3>

<p>Your controller may or may not be already mapped to a Gamecube controller.
If PF Sandbox isn't responding to your controller you may need to create a map for your controller.
</p>
<ul>
    <li>Run <code>pf_map_controllers.exe</code></li>
    <li>Select your controller from the dropdown box.</li>
    <li>For all inputs: Press the input on your controller you want to map, then press the "Add from last input" for the GC input you want to map it to.</li>
    <li>Press Save</li>
</ul>

<h2 class="doc-heading">Gameplay</h2>

<p>Use <code>a</code> on your GC controller to: select package, select local, select characters, select stages and FIGHT!
Use <code>b</code> on your GC controller to go to previous menus (keep pressing to reach package select screen)</p>
<p>The player outlines are used to signify which team they belong to, you can change teams on the character select screen.</p>

<h3 class="doc-heading">Camera</h3>

<p>Middle click to pan the camera.
Scroll to zoom the camera.
Press Backspace to return control of the camera to the game.</p>

<h2 class="doc-heading">Packages</h2>

<p>Packages are how unique games are made and shared in PF Sandbox. A package contains:</p>
<ul>
    <li>Stages</li>
    <li>Fighters</li>
    <li>Game Rules</li>
    <li>A source URL to retrieve updates from</li>
</ul>

<p>To add a package to PF Sandbox, download it, then click and drag it onto the PF Sandbox window.</p>
<p>PF Sandbox will unzip it and store it here:</p>
<ul>
    <li>Linux: <code>~/.local/share/PF_Sandbox/packages</code></li>
    <li>Windows: <code>C:\Users\USERNAME\Appdata\Local\PF_Sandbox\packages</code> (replace USERNAME with your actual username)</li>
</ul>

<p>You can safely copy fighter and stage files between packages.</p>
<p>You can use the <code>:open_package $package_folder_name</code> command on the menu to open the package stored at the specified folder name.
If the package does not exist at that folder a new package is created there.</p>

<h2 class="doc-heading">Editor</h2>

<p>Always backup any packages you are working on.
Due to the nature of the interface it is super easy to accidentally destroy work without realising.</p>
<p>To work through some examples check out the <a href="tutorial">editor-tutorial</a>.</p>
<p>The pause screen is where all the editing action occurs.
<span class="warning">Make sure you are on the pause screen to make use of the following tools.</span></p>

<h3 class="doc-heading">Game Flow</h3>

<p>Use the following keys to alter the flow of the game</p>
<ul>
    <li>Spacebar - step game</li>
    <li>H        - Rewind</li>
    <li>J        - Step rewind</li>
    <li>K        - Step replay</li>
    <li>L        - Replay</li>
</ul>

<h3 class="doc-heading">Editor Selector</h3>

<p>Before editing anything you must first select what you wish to edit:</p>

<ul>
    <li>0         - Stage</li>
    <li>1         - Player 1's fighter</li>
    <li>2         - Player 2's fighter</li>
    <li>3         - Player 3's fighter</li>
    <li>4         - Player 4's fighter</li>
    <li>1 + Shift - Player 1</li>
    <li>2 + Shift - Player 2</li>
    <li>3 + Shift - Player 3</li>
    <li>4 + Shift - Player 4</li>
</ul>

<h3 class="doc-heading">Element Selection</h3>

<p>Sometimes you need to make ANOTHER selection with your mouse.
In different editor modes you can select different elements to modify them.</p>

<ul>
    <li>Left click           - Select one element</li>
    <li>Right click and drag - Select multiple elements</li>
</ul>

<h4>Modifiers</h4>

<ul>
    <li>Default   - Delete the previous selection</li>
    <li>Shift key - Add to the previous selection</li>
    <li>Alt key   - Remove from previous selection</li>
</ul>

<h3 class="doc-heading">Debug Displays</h3>

<p>While in the relevant editor mode (keys 0-9) you can toggle various debug displays.
Textual debug output is also written to stdout every time a frame is changed or modified.
Use F1-F12 to toggle them.</p>

<h2 class="doc-heading">Fighter Editor (1-9)</h2>

<h3 class="doc-heading">Debug Displays</h3>

<ul>
    <li>F1 - Player physics</li>
    <li>F2 - Input</li>
    <li>F2 + Shift - Input difference</li>
    <li>F3 - Current action</li>
    <li>F4 - Timers and Counters</li>
    <li>F5 - Control stick (white) + C Stick vector (yellow)</li>
    <li>F6 - pre DI vector (red) + post DI vector (green)</li>
    <li>F7 - hitbox BKB vector (white) + hitbox KBG (blue)</li>
    <li>F8 - Display ECB and BPS</li>
    <li>F9 - Dont display fighter</li>
    <li>F10 - Display player camera area</li>
    <li>F11 - Set all</li>
    <li>F12 - Reset all</li>
</ul>

<h3 class="doc-heading">Frame editing</h3>

<ul>
    <li>V - Copy frame</li>
    <li>B - Paste frame</li>
    <li>N - Delete frame</li>
    <li>M - Insert frame, copies from previous frame</li>
</ul>

<h3 class="doc-heading">Collision Box editing</h3>

<p>Most of these operations will apply to all selected colboxes:</p>

<ul>
    <li>A - Move colboxes, left click to confirm</li>
    <!--<li>S - Toggle pivot mode (TODO)</li>-->
    <li>D - Delete selected colboxes</li>
    <li>
        F - Insert colbox meld linked to selected colboxes, left click to confirm
        <ul>
            <li>Shift: simple link</li>
        </ul>
    </li>
    <li>[ - Shrink selected colboxes</li>
    <li>] - Grow selected colboxes</li>
    <!--<li>Z - Meld link colboxes (TODO)</li>-->
    <!--<li>X - Simple link colboxes (TODO)</li>-->
    <!--<li>C - Unlink colboxes (TODO)</li>-->
    <li>, - Bring selected colboxes in front of the other colboxes</li>
    <li>. - Send selected colboxes behind the other colboxes</li>
    <li>Q - Set selected hitbox angles to point to the cursor</li>
</ul>

<p>Linking collision boxes allows them to be pivoted in pivot mode.
Meld links combines collisionboxes into a single collisionbox.</p>

<!--
<h3 class="doc-heading">Pivot mode (TODO)</h3>

<p>When there is one collisionbox selected, pressing <code>S</code> will enter pivot mode.</p>

<p>The selected collisionbox becomes the root collision box.
Any collisionbox can now be click and drag'ed around the root box.</p>

<p>Press <code>S</code> again to leave pivot mode.</p>
-->

<h2 class="doc-heading">Stage Editor (0)</h2>

<h3 class="doc-heading">Debug Displays</h3>

<ul>
    <li>F1 - Display blast zone boundary</li>
    <li>F2 - Display camera boundary</li>
    <li>F3 - Display/edit spawn points</li>
    <li>F4 - Display/edit respawn points</li>
    <li>F11 - Set all</li>
    <li>F12 - Reset all</li>
</ul>

<h3 class="doc-heading">Element Editing</h3>

<p>The following operations apply to all selected platforms and re/spawn points</p>

<ul>
    <li>A - Move element</li>
    <li>D - Delete element</li>
    <li>F - Place platform</li>
    <li>Z - Place spawn point</li>
    <li>X - Place respawn point</li>
    <li>C - Connect/disconnect surfaces</li>
</ul>

<h2 class="doc-heading">Command line</h2>

<p>Press '~' to open the command line in PF Sandbox.
Alternatively you can use the pf_cli binary to send commands via your OS's terminal to PF Sandbox.
Note that when using pf_cli you will need to escape characters that have special meaning to your shell. e.g. quotes</p>

<p>The PF Sandbox command line is very powerful, at the price of complexity.
We recommend you work through the Command Line section of the <a href="tutorial">Editor Tutorial</a> if you have not yet worked with the PF Sandbox command line tool.
You can then come back here if you ever need a reference.</p>

<h3 class="doc-heading">Breakdown</h3>

<p>Lets give a quick breakdown of an example command.
This command sets the weight of someFighter in the package myPackage to 1.2:</p>

<p><code>package.fighters[base_fighter.json].weight:set 1.2</code></p>

<ul>
    <li>package             - property</li>
    <li>fighters            - property</li>
    <li>[base_fighter.json] - key</li>
    <li>weight              - property</li>
    <li>set                 - command</li>
    <li>1.2                 - value</li>
</ul>

<p>A command consists of:</p>

<ol>
    <li>properties, indexes and keys to select an object.</li>
    <li>A command to do something to the selected object.</li>
    <li>Some commands require extra values to tell it what to do.</li>
</ol>

<h3 class="doc-heading">Actions</h3>

<p>Different objects support different commands:</p>

<p>All objects support the following commands:</p>

<ul>
    <li>help <value> - view an objects type, its attributes and its commands</li>
    <li>set <value>  - change an attribute to the specified size</li>
    <li>get <depth>  - display an attribute, the depth argument is optional and specifies how deeply nested object attributes should be shown.</li>
    <li>copy         - copy the specified attribute</li>
    <li>paste        - paste the copied attribute to the specified attribute (Must be the same type)</li>
</ul>

<!--
<p>Properties that are assigned some point in space can use the following (TODO)
*   rotate <degrees> - rotate the object, around some central point, the specified number of degrees</p>

### Object structure

Objects contain other objects creating a large tree:

[TODO: Replace with a nice diagram that doesn't look terrible and is hopefully autogenerated]
*   Players
*   Debug
*   Packages
    +   Fighters
        -   <fighter name>
            *   action_defs
                +   <action index>
                    -   ActionFrame
                        *   colboxes
                            +   <colbox index>
                                -   CollisionBoxRole
                        *   colbox_links
                            +   <link index>
                        *   effects
    +   Stages
    +   Rules
-->

<h3 class="doc-heading">Getter</h3>

<p>Get object properties with dot notation. </p>

<p><code>object.property</code></p>

<h3 class="doc-heading">Indexing</h3>

<p>Sometimes an objects properties require an index or key to access them.</p>

<ul>
    <li><code>property["key_string"]</code> select by key</li>
    <li><code>property[0]</code>            select by index</li>
    <li><code>property[?]</code>            select based on <a href="#context-section">context</a></li>
    <li><code>property[*]</code>            select all</li>
</ul>

<!--
<p>TODO: Planned fancy index accessors</p>

<ul>
    <li><code>property[0, 3]</code> select 0 and 3 (TODO)</li>
    <li><code>property[1-5]</code>  select 0 and between 1 and 5 inclusive (TODO)</li>
    <li><code>property[?+1]</code>  one more then context (TODO)</li>
</ul>
-->

<h3 class="doc-heading" id="context-section">Context</h3>

<p>There are many contexts available that allow you to quickly access the object you want to modify.
Setting a colbox to radius 10 can be done the primitive way.
Objects are chained together with '.' and indexed by [] like this:</p>

<p><code>package.fighters["fighter.json"].actions[0].frames[0].colboxes[2].radius:set 10</code></p>

<p>However how are you supposed to know all of these indexes? o.0
Instead you can let PF Sandbox use context to know what you want to modify.
Select the hitboxes you want in game then run:</p>

<p><code>pf package.fighters[?].actions[?].frames[?].colboxes[?].radius:set 10</code></p>

<h2 class="doc-heading">Sharing a Package With a Friend</h2>

<ol>
    <li>Run <code>package:publish</code></li>
    <li>Open the folder at <code>C:\Users\USERNAME\AppData\Local\PF_Sandbox\publish\</code> or <code>~/.local/share/PF_Sandbox/publish/</code></li>
    <li>Send the most recent <code>package*.zip</code> file to your friend.</li>
    <li>Your friend then click and drags the <code>package*.zip</code> file to their PF Sandbox window.</li>
</ol>

<h2 class="doc-heading">Publishing a Package</h2>

Publishing a package allows your to easily keep your users up to date with the latest version of your package.
Perform the following every time you want to publish a new version of your package.

<ol>
    <li>
        Add a source property to your package_meta, this is a URL where pf_sandbox will automatically download new versions of the package from.
        Run the commands:
        <ol>
            <li><code>package.meta.source:insert</code></li>
            <li><code>package.meta.source:set your-domain.com/package_folder</code> (replace the URL with your own)</li>
        </ol>
    </li>
    <li>Run <code>package:publish</code></li>
    <li>Open the folder at <code>C:\Users\USERNAME\AppData\Local\PF_Sandbox\publish\</code> or <code>~/.local/share/PF_Sandbox/publish/</code></li>
    <li>Upload package_meta.json and the latest package*.zip file to your webserver at the URL you specified in the source property.</li>
</ol>

<p>Note:
If PF Sandbox encounters any errors while updating a package, it will "silently" fail and continue loading the package as normal.
This is because we dont want to prevent users playing local games due to network issues.
However to troubleshoot issues with PF Sandbox downloading/updating your package you can check stdout for errors.
{{/inline}}</p>

<p>{{~> base title="PF Sandbox | Manual" page_manual=true ~}}</p>
